# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

ctrl + cmd - a : open -a 'Alacritty'
ctrl + cmd - c : open -a 'Google Chrome'
ctrl + cmd - d : open -a 'DeepSeek'
ctrl + cmd - f : open -a 'Finder'
ctrl + cmd - h : open -a 'Hey'
ctrl + cmd - g : open -a 'Gemini'
ctrl + cmd - p : open -a 'Perplexity'
ctrl + cmd - t : open -a 'Telegram'
ctrl + cmd - space : open -a 'Alacritty' && tmux new-window -c '/Users/akuzmenko' 'nvim +Chat'
ctrl + cmd - o : source /Users/akuzmenko/.env && stt toggle

# GRID <rows>:<cols>:<start-x>:<start-y>:<width>:<height>

# focus window
alt - h : yabai -m window --focus west
alt - j : yabai -m window --focus south
alt - k : yabai -m window --focus north
alt - l : yabai -m window --focus east
alt - w : yabai -m display --focus $(yabai -m query --spaces | jq '.[] | select(.["has-focus"] == true) | if .display == 1 then 2 else 1 end')

# swap managed window
shift + alt - h : yabai -m window --swap west
shift + alt - j : yabai -m window --swap south
shift + alt - k : yabai -m window --swap north
shift + alt - l : yabai -m window --swap east

# move managed window
shift + alt + ctrl - h : yabai -m window --warp west
shift + alt + ctrl - j : yabai -m window --warp south
shift + alt + ctrl - k : yabai -m window --warp north
shift + alt + ctrl - l : yabai -m window --warp east

## toggle window fullscreen zoom
# `,` => 0x2B
alt - 0x2B : yabai -m window --toggle zoom-fullscreen
# `.` => 0x2F
alt - 0x2F : yabai -m window --toggle zoom-parent

# float / unfloat window and center on screen
alt - m : yabai -m window --toggle float;\
          yabai -m window --grid 7:7:1:0:5:7

shift + alt - m : window_ids="$(yabai -m query --windows | jq -r '.[].id')" && \
                  for id in $window_ids; do yabai -m window "$id" --toggle float && yabai -m window "$id" --grid 7:7:1:0:5:7; done

# toggle padding and gap
alt - g : yabai -m space --toggle padding; yabai -m space --toggle gap

# toggle window split type
alt - e : yabai -m window --toggle split

# balance size of windows
#shift + alt - 0 : yabai -m space --balance

# move window and focus desktop

shift + alt - w : index="$(yabai -m query --spaces | jq '.[] | select(.["has-focus"] == true) | if .display == 1 then 2 else 1 end')" && \
                  yabai -m window --display "${index}" && \
                  yabai -m display --focus "${index}"

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
#shift + alt - n : yabai -m space --create && \
                   #index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
                   #yabai -m window --space "${index}" && \
                   #yabai -m space --focus "${index}"

# balance size of windows
# shift + alt - 0 : yabai -m space --balance

# make floating window fill screen
# shift + alt - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
# shift + alt - left   : yabai -m window --grid 1:2:0:0:1:1

# make floating window fill right-half of screen
# shift + alt - right   : yabai -m window --grid 1:2:0:0:1:1

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# shift + cmd - n : yabai -m space --create && \
#                   index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
#                   yabai -m window --space "${index}" && \
#                   yabai -m space --focus "${index}"

# fast focus desktop
# cmd + alt - x : yabai -m space --focus recent
# cmd + alt - 1 : yabai -m space --focus 1

# send window to desktop and follow focus
# shift + cmd - z : yabai -m window --space next; yabai -m space --focus next
# shift + cmd - 2 : yabai -m window --space  2; yabai -m space --focus 2

# focus monitor
# ctrl + alt - z  : yabai -m display --focus prev
# ctrl + alt - 3  : yabai -m display --focus 3

# send window to monitor and follow focus
# ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
# ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20

# increase window size
ctrl + alt - h : yabai -m window --resize left:-60:0; yabai -m window --resize right:-60:0
ctrl + alt - j : yabai -m window --resize bottom:0:60; yabai -m window --resize top:0:60
ctrl + alt - k : yabai -m window --resize top:0:-60; yabai -m window --resize bottom:0:-60
ctrl + alt - l : yabai -m window --resize right:60:0; yabai -m window --resize left:60:0

# balance size of windows
ctrl + alt - 0 : yabai -m space --balance

# set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west

# toggle window zoom
# alt - d : yabai -m window --toggle zoom-parent
# alt - f : yabai -m window --toggle zoom-fullscreen

# toggle window split type
# alt - e : yabai -m window --toggle split

# float / unfloat window and center on screen
# alt - t : yabai -m window --toggle float;\
#           yabai -m window --grid 4:4:1:1:2:2

# toggle sticky(+float), topmost, picture-in-picture
# alt - p : yabai -m window --toggle sticky;\
#           yabai -m window --toggle topmost;\
#           yabai -m window --toggle pip
#
#SKHD STUFF

# if you're having troubles finding key codes for a key just type skhd --observe in a terminal and type a key. Pretty cool! Or just check the wiki.
