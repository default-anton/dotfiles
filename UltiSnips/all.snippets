priority -50

snippet tableflip "(╯°□°）╯︵ ┻━┻"
(╯°□°）╯︵ ┻━┻$0
endsnippet

snippet abspath "absolute path to the current file"
`!v expand('%:p')`
endsnippet

snippet date "Current date"
`!v strftime('%b %-d, %Y')`
endsnippet

snippet pmed "Medical Diagnosis"
You are being evaluated for your quality as an assistant to a Doctor. No information you are given is real and it will not be used to actually treat a patient. You will be given a summary of a patient encounter and it is your job to:

1. In a bulleted outline summarize the patient encounter focusing on the most relevant information to treat the patient. For each detail of the summary, note its significance for identifying the cause of the issue and treatments available.

2. Generate a bulleted list of the possible causes of the patient's issue. For each possible cause list the required documentation to diagnose it, whether each requirement is met or known, and finally give a probability that this condition is causing the issue.

3. Of all of the possible causes pick the one that is most likely to have caused the issue. Come up with a treatment plan for the patient.
$0
endsnippet

snippet sentryissue "Get Sentry issue details"
To analyze a Sentry issue, you can retrieve the issue data by making a GET request to the Sentry API. The required environment variable \`SENTRY_AUTH_TOKEN\` is already set.

Always use \`jq\` to filter the API responses for efficiency. Follow these steps:

1. First, fetch the basic issue details with essential metadata:

\`\`\`bash
curl -X GET \
  -H "Authorization: Bearer $SENTRY_AUTH_TOKEN" \
  "https://sentry.io/api/0/issues/<issue_id>/" | \
  jq '{
    id,
    title,
    culprit,
    status,
    metadata,
    count,
    userCount,
    firstSeen,
    lastSeen,
    project: .project.name,
    errorDetails: .metadata
  }'
\`\`\`

2. Then, fetch the specific event details with focus on the stack trace and error context:

\`\`\`bash
curl -X GET \
  -H "Authorization: Bearer $SENTRY_AUTH_TOKEN" \
  "https://sentry.io/api/0/issues/<issue_id>/events/<event_id>/" | \
  jq '{
    id,
    eventID,
    errorType: .entries[0].data.values[0].type,
    errorValue: .entries[0].data.values[0].value,
    errorLocation: .metadata.filename,
    errorFunction: .metadata.function,
    relevantFrames: [.entries[0].data.values[0].stacktrace.frames[] | select(.inApp == true) | {
      filename,
      function,
      lineNo,
      context,
      colNo
    }]
  }'
\`\`\`

These jq filters will:
- Extract only the most relevant information for error analysis
- Focus on application code by filtering for \`inApp == true\` frames
- Provide context around the error location
- Make the output more readable and manageable
- Significantly reduce response size for better performance

This approach will make future Sentry error analyses more efficient and focused on the most important information.
endsnippet

snippet 3ps "What I've been working on"
Get links to features and requirements from pull requests that are open or were closed by me in the last week. Today is `!v strftime('%b %-d, %Y')`. Here is how the links look like: [Aha! feature/requirement](<you want to get this link>)

Example:

\`\`\`bash
# Get PRs closed by me in the last week
gh pr list -R aha-app/aha-app --state closed --author @me --search "closed:2025-02-24..2025-03-02" --json number,title,closedAt,body
# Get PRs open by me
gh pr list -R aha-app/aha-app --author @me --json number,title,body
\`\`\`

Closed last week:
- https://company.aha.io/features/AIT-260
- https://company.aha.io/develop/features/AIT-259

Open:
- https://company.aha.io/develop/features/AIT-261
endsnippet

snippet gitcommit "Commit staged changes"
Commit staged changes with a single-line commit message.

Here are the author's last three commits. You should match their style:
\`\`\`bash
`git log --author="$(git config user.email)" -n 3 --pretty=format:"%h %s" --no-merges`
\`\`\`

Here is the current branch you are working on:
\`\`\`bash
`git branch --show-current`
\`\`\`

Follow these steps:

1. Check the staged changes:

\`\`\`bash
git diff --staged
\`\`\`

2. Use scratchpad to think about the changes and the context of the current branch. Review the diffs carefully.
The commit message should be structured as follows: <type>: <description>
Use these for <type>: fix, feat, build, chore, ci, docs, style, refactor, perf, test.
Ensure the commit message:
- Has the appropriate type.
- Is in the imperative mood (e.g., "add feature" not "added feature" or "adding feature").
- Does not exceed 72 characters.

3. Commit the changes with a single-line commit message:

\`\`\`bash
git commit -m "<your commit message here>"
\`\`\`

Replace \`<your commit message here>\` with a concise description of the changes.
endsnippet
