#!/usr/bin/env python3

import argparse
import os
from pathlib import Path
from subprocess import Popen, check_output
from typing import Final, Tuple, List
from platform import python_version

NODE = "22"
RUBY = "3.4"
LUA = "5.1"

SYM_LINKS: Final[List[Tuple[str, str]]] = [
    ("~/.ripgreprc", "ripgreprc"),
    ("~/.gitconfig", "gitconfig"),
    ("~/.psqlrc", "psqlrc"),
    ("~/.sqliterc", "sqliterc"),
    ("~/.bash_aliases", "bash_aliases"),
    ("~/.tmux.conf", "tmux.conf"),
    ("~/.config/pgcli/config", "pgcli/config"),
    ("~/.config/nvim", "nvim"),
    ("~/.config/lazygit/config.yml", "lazygit.yml"),
    ("~/Library/Application Support/jesseduffield/lazygit/config.yml", "lazygit.yml"),
    ("~/.config/bat/config", "bat/config"),
    ("~/.config/starship.toml", "starship.toml"),
    ("~/.config/yabai", "config/yabai"),
    ("~/.config/skhd", "config/skhd"),
    ("~/.claude/commands", "claude/commands"),
    ("~/.claude/settings.json", "claude/settings.json"),
    ("~/.claude/CLAUDE.md", "claude/CLAUDE.md"),
    ("~/.gemini/settings.json", "gemini/settings.json"),
    ("~/.config/opencode/opencode.json", "opencode/opencode.json"),
]

TEMPLATES: Final[List[Tuple[str, str]]] = [
    ("~/.config/alacritty/alacritty.toml", "alacritty.toml"),
]

DIRECTORIES: Final[List[str]] = [
    "~/code",
]

DOTFILES: Path = Path("~/.dotfiles").expanduser()

SHELL_CMDS: Final[List[str]] = [
    "brew bundle --no-upgrade",
    f"$(brew --prefix)/bin/mise use --global node@{NODE} ruby@{RUBY} lua@{LUA}",
    "echo ruff ty | xargs -n1 $(brew --prefix)/bin/uv tool install",
    "pip3 install --break-system-packages --user pynvim",
    "$(brew --prefix)/opt/fzf/install",
]

BASHRC_LINES: Final[List[str]] = [
    "source ~/.dotfiles/bashrc",
]

BASH_PROFILE_LINES: Final[List[str]] = [
    "source ~/.bashrc",
    "source ~/.dotfiles/profile",
]

def main():
    major, minor, patch = map(int, python_version().split('.'))
    assert major == 3, 'python 3 expected'

    parser = argparse.ArgumentParser()

    if minor >= 9:
        parser.add_argument("--brew", action=argparse.BooleanOptionalAction)
        parser.set_defaults(brew=True)
    else:
        parser.add_argument("--no-brew", dest='brew', action='store_false')

    args = parser.parse_args()

    os.environ["HOMEBREW_PREFIX"] = check_output(["brew", "--prefix"]).strip().decode()

    if args.brew:
        for cmd in SHELL_CMDS:
            process = Popen(
                cmd,
                cwd=DOTFILES,
                shell=True,
                executable=os.getenv("SHELL"),
            )
            process.wait(timeout=3600)

    for (src, dst) in SYM_LINKS:
        src, dst = Path(src).expanduser(), DOTFILES.joinpath(dst)
        src.parent.mkdir(parents=True, exist_ok=True)
        print(f"ln -s {src} {dst}")
        src.unlink(missing_ok=True)
        src.symlink_to(dst, target_is_directory=dst.is_dir())

    for (dst, template) in TEMPLATES:
        dst, template = Path(dst).expanduser(), DOTFILES.joinpath(template)
        dst.parent.mkdir(parents=True, exist_ok=True)
        dst.unlink(missing_ok=True)
        process = Popen(
            f'envsubst < "{template}" > "{dst}"',
            cwd=DOTFILES,
            shell=True,
            executable=os.getenv("SHELL"),
        )
        process.wait(timeout=3600)

    for directory in DIRECTORIES:
        print(f"mkdir -p {directory}")
        Path(directory).expanduser().mkdir(parents=True, exist_ok=True)

    bashrc = Path("~/.bashrc").expanduser()
    bashrc_content = bashrc.read_text()
    with bashrc.open(mode="a") as f:
        for bashrc_line in BASHRC_LINES:
            if bashrc_line not in bashrc_content:
                f.write(bashrc_line)

    profile = Path("~/.bash_profile").expanduser()
    profile_content = profile.read_text()
    with profile.open(mode="a") as f:
        for profile_line in BASH_PROFILE_LINES:
            if profile_line not in profile_content:
                f.write(profile_line)

if __name__ == "__main__":
    main()
